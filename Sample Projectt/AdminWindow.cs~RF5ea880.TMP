using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Configuration;

namespace Sample_Projectt
{
    public partial class AdminWindow : Form
    {
        int productCount = 0;
        public static double pureGold=0;
        public static int cash=0;
        string rbNam = "";
        string value = "";
        float Gold_R, touchPouch, total;
        int count = 0, reportID;
        string[] product_name;
        string UpdateID = "";
        float Gold = 0, TotalGold = 0;
        string conn = ConfigurationManager.ConnectionStrings["conn"].ConnectionString;
        SqlConnection con;
        SqlDataReader rdr;
        string select, insert, update, insertInventory;
        SqlDataAdapter adap;
        SqlCommand cmd, cmd1, cmd2;
        DataSet ds = new DataSet();
        //DataTable dt;
        SqlCommandBuilder sqlbuild;
        public static string Word = "SUP";

        int ID = 0;
        double G_Receive;
        float Lab;
        TransectionSupplier ts = new TransectionSupplier();

        public AdminWindow()
        {
            //dt = new DataTable();

            InitializeComponent();
            panelSupplier.Hide();
            panelInventory.Hide();
            panelPremainInventory.Hide();

        }

        private void supplierToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SupplierRefresh();
            panelSupplier.Show();
            //StyleSupplierGrid(); 
            panelInventory.Hide();
            panelProduct.Hide();
            panelPremainInventory.Hide();


        }
        private void ProductToolStrip_Click(object sender, EventArgs e)
        {
            ProductRefresh();
            panelProduct.Show();

            panelSupplier.Hide();
            panelInventory.Hide();
            panelPremainInventory.Hide();
           

        }

        private void InventoryToolStrip_Click(object sender, EventArgs e)
        {
            panelSupplier.Hide();
            panelInventory.Hide();////
            TextBlankPreMainInventory();
            GetSupplierName();
            getCountInitial();
            panelProduct.Hide();
            panelPremainInventory.Show();///
            GettingcomboValue();


        }
        private void reportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Report report = new Report();
            report.ShowDialog();
        }

        private void lblname_Click(object sender, EventArgs e)
        {

        }



        private void AdminWindow_Load(object sender, EventArgs e)
        {
            btnuupdate.Enabled = false;
            getCount();
            panelPremainInventory.Hide();

            getCountProduct();
            //dt = new DataTable();
            btnUpdateProduct.Enabled = false;
            datePicker1.Text = DateTime.Now.Date.ToShortDateString();
            datePicker1.Enabled = false;
            datePickPremain.Text = DateTime.Now.ToShortDateString();

        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtName.Text))
            {
                MessageBox.Show("Please Enter Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else if (string.IsNullOrEmpty(txtEmail.Text))
            {
                MessageBox.Show("Please Enter Email", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else if (string.IsNullOrEmpty(txtContact.Text))
            {
                MessageBox.Show("Please Enter Contact Number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
                using (con = new SqlConnection(conn))
                {
                    string update = "update Supplier set Name='" + txtName.Text + "',Contact=" + txtContact.Text + ",Email='" + txtEmail.Text + "',Location='" + txtLoaction.Text + "'where Supplier_ID='" + UpdateID + "'";
                    cmd = new SqlCommand(update, con);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    ButtonDisableProduct();
                    btnuupdate.Enabled = false;
                    ResetTextBoxesSupplier();
                    btnAdd.Enabled = true;
                    btnCancel.Enabled = true;
                    btnDisplay.Enabled = true;
                    GetData();
                }
            using (con = new SqlConnection(conn))
            {
                string update = "update SupplierTransection set Supplier_Name='" + txtName.Text + "'where Supplier_ID='" + UpdateID + "'";
                cmd = new SqlCommand(update, con);
                con.Open();
                cmd.ExecuteNonQuery();

            }
            //using (con = new SqlConnection(conn))
            //{
            //    string update = "update InventoryDetails set Supplier_Name='" + txtName.Text +  "'where Supplier_ID='" + UpdateID + "'";
            //    cmd = new SqlCommand(update, con);
            //    con.Open();
            //    cmd.ExecuteNonQuery();

            //}



        }
        void GetData()
        {

            DataTable dt = new DataTable();
            select = "select * from Supplier";

            con = new SqlConnection(conn);
            cmd = new SqlCommand(select, con);
            con.Open();
            rdr = cmd.ExecuteReader();
            dt.Load(rdr);

            dataGridSupplier.DataSource = dt;

            con.Close();
            StyleSupplierGrid();
            //DataTable dr_art_line_2 = (DataTable)rdr["Product"];
            //for (int i = 0; i < dr_art_line_2.Rows.Count; i++)
            //{
            //    int temp = Convert.ToInt32(dr_art_line_2.Rows[i]["Product_ID"]);
            //}

        }
        private void btnDisplay_Click(object sender, EventArgs e)
        {
            GetData();
            SupplierRefreshTextBox();
            ButtonDisableSupplier();
            SuplierDisableTextBox();
            btnuupdate.Enabled = true;
            ///StyleSupplierGrid();

        }
        void SuplierEnableTextBox()
        {
            txtName.Enabled = true;
            txtContact.Enabled = true;
            txtEmail.Enabled = true;
            txtLoaction.Enabled = true;
        }
        void SuplierDisableTextBox()
        {
            txtName.Enabled = false;
            txtContact.Enabled = false;
            txtEmail.Enabled = false;
            txtLoaction.Enabled = false;
        }
        void SupplierRefreshTextBox()
        {
            txtName.Text = "";
            txtContact.Text = "";
            txtEmail.Text = "";
            txtLoaction.Text = "";
        }
        private void dataGridSupplier_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            {
                SuplierEnableTextBox();
                dataGridSupplier.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
                UpdateID = (dataGridSupplier.Rows[e.RowIndex].Cells[0].Value.ToString());
                txtName.Text = (dataGridSupplier.Rows[e.RowIndex].Cells[1].Value.ToString());
                txtContact.Text = (dataGridSupplier.Rows[e.RowIndex].Cells[2].Value.ToString());
                txtEmail.Text = dataGridSupplier.Rows[e.RowIndex].Cells[3].Value.ToString();
                txtLoaction.Text = dataGridSupplier.Rows[e.RowIndex].Cells[4].Value.ToString();
                ButtonDisableSupplier();
                btnuupdate.Enabled = true;
            }
            else
            {
                MessageBox.Show("Please Click On CONTENT not on Column Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                //Console.WriteLine("Print " + e.ColumnIndex + "      " + e.RowIndex);
            }

        }

        void getCount()
        {
            using (con = new SqlConnection(conn))
            {
                string temp = "";
                select = "SELECT TOP 1 Supplier_ID FROM Supplier ORDER BY Supplier_ID DESC";
                con.Open();

                cmd = new SqlCommand(select, con);
                rdr = cmd.ExecuteReader();
                //rdr.IsDBNull
                while (rdr.Read())
                {
                    temp = (rdr[0]).ToString();
                }
                if (temp != string.Empty)
                {
                    string stringID = temp.Substring(3, 5);

                    ID = Convert.ToInt32(stringID);
                }


            }

        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            getCount();

            if (string.IsNullOrEmpty(txtName.Text))
            {
                MessageBox.Show("Please Enter Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else if (string.IsNullOrEmpty(txtEmail.Text))
            {
                MessageBox.Show("Please Enter Email", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else if (string.IsNullOrEmpty(txtContact.Text))
            {
                MessageBox.Show("Please Enter Contact Number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
                ID++;
                value = ID.ToString("00000");
                string IDPass = Word + value;

                insert = "insert into Supplier(Supplier_ID,Name,Contact,Email,Location,Balance_Cash,Balance_Gold) values('" + IDPass + "','" + txtName.Text + "','" + txtContact.Text + "', '" + txtEmail.Text + "', '" + txtLoaction.Text + "','" + 0 + "','" + 0 + "')";
                using (con = new SqlConnection(conn))
                {
                    con.Open();
                    cmd = new SqlCommand(insert, con);
                    cmd.ExecuteNonQuery();
                    GetData();
                }
                SupplierRefreshTextBox();
                //StyleSupplierGrid();
            }

        }



        void GetInventoyDetails()
        {

            using (con = new SqlConnection(conn))
            {
                DataTable dt = new DataTable();
                string select = "select * from InventoryDetails where Transection_ID='" + txtTransIDmain.Text + "'";
                cmd = new SqlCommand(select, con);
                con.Open();
                rdr = cmd.ExecuteReader();
                dt.Load(rdr);
                gridInventoryDetails.DataSource = dt;
                StyleInventoryGrid();
            }
        }




        //panel 2 functions are here
        void getCountMain()
        {
            using (con = new SqlConnection(conn))
            {
                string temp = "";
                select = "SELECT TOP 1 ReportID FROM InventoryDetails ORDER BY ReportID DESC";
                con.Open();

                cmd = new SqlCommand(select, con);
                rdr = cmd.ExecuteReader();
                //rdr.IsDBNull
                while (rdr.Read())
                {
                    temp = (rdr[0]).ToString();
                }
                if (temp != string.Empty)
                {
                    string stringID = temp;

                    reportID = Convert.ToInt32(stringID);
                    reportID++;

                }
                else
                    reportID = 1;
                txtTransIDpremain.Text = ID.ToString();

            }

        }
        private void btnSubmitInventory_Click(object sender, EventArgs e)
        {
            productCount++;
            int quantity;
            double weight;
            double tmp = Convert.ToDouble(String.Format("{0:#,##0.000;(#,##0.000);Zero}", (txtPure.Text)));

            pureGold = pureGold + tmp;
            cash = cash + Convert.ToInt32(txtCash.Text);
            string radioInput = "";
            quantity =
                (Convert.ToInt32(txtQuantity.Text));
            weight = Convert.ToDouble(txtWeight.Text);
            double labour = Convert.ToDouble(txtLabour.Text);
            using (SqlConnection con = new SqlConnection(conn))
            {
                getCountMain();

                select = "select Item_Name from Inventory where Item_Name='" + cmdID.SelectedItem.ToString() + "'";
                cmd = new SqlCommand(select, con);

                con.Open();
                rdr = cmd.ExecuteReader();


                while (rdr.Read())
                {
                    count = count + 1;
                }
                con.Close();
                if (count >= 1)
                {
                    //MessageBox.Show("Product already Exist", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    insertInventory = "update inventory set Item_Weight=Item_Weight+" + tmp + ", " +
                    "Total_Quantity=Total_Quantity+" + Convert.ToInt32(txtQuantity.Text) + " where Product_ID='" + txtProductID.Text + "'";
                }

                else
                {
                    insertInventory = "insert into inventory(Product_Id,Item_Name,Item_Weight,Total_Quantity,Purity)" +
                        " values('" + txtProductID.Text + "','" + cmdID.SelectedItem.ToString() + "','" + tmp + "','" + txtQuantity.Text + "'" +
                        ",'" + rbNam + "')";
                }
                insert = "insert into InventoryDetails(Product_ID,Product_Name,Supplier_ID,Supplier_Name,Item_Weight,Item_Quantity,Date,Purity,ReportID,Transection_ID,Pure_Gold,Cash) values " +
               "(  '" + txtProductID.Text + "', '" + cmdID.SelectedItem.ToString() + "','" + txtSupID.Text + "','" + txtSupname.Text + "','" + txtWeight.Text + "','" + txtQuantity.Text + "','" + Convert.ToDateTime(datePicker1.Value.Date) + "','" + radioInput + "','" + reportID + "','" + txtTransIDmain.Text + "','" + tmp + "','"+txtCash.Text+"')";
                //  update = "update Supplier set Balance_Gold=Balance_Gold+" + Convert.ToDouble(FineGold) + " where Supplier_ID='" + txtSupID.Text + "'";

                cmd = new SqlCommand(insert, con);

                cmd1 = new SqlCommand(insertInventory, con);
                cmd2 = new SqlCommand(update, con);
                con.Open();
                cmd.ExecuteNonQuery();
                cmd1.ExecuteNonQuery();
                //cmd2.ExecuteNonQuery();
                con.Close();
                rb14.Checked = false;
                rb18.Checked = false;
                rb14.Checked = false;
                txtQuantity.Text = "";
                txtProductID.Text = "";
                cmdID.Text = "";
                txtWeight.Text = "";
                txtLabourRs.Text = "";
                txtTouchPouch.Text = "";
                txtLabour.Text = "";
                txtPure.Text = "";
                txtCash.Text = "";
                GetInventoyDetails();
                //TotalGold = Gold + TotalGold;


                totalvalue.Text = TotalGold.ToString();

                //update = "update SupplierTransection set Gold_Receive=Gold_Receive+'" + Gold + "' where Supplier_ID='" + txtSupID.Text + "'  ";

                //using (SqlConnection cons = new SqlConnection(conn))
                //{ 
                //    cons.Open();
                //    cmd = new SqlCommand(update, cons);
                //    cmd.ExecuteNonQuery();
                if (productCount == Convert.ToInt32(txtNoProduct.Text))
                {
                    double calGold = Convert.ToDouble(txtGoldPaid.Text) - pureGold;
            
                    // double val = Convert.ToDouble(String.Format("{0:#,##0.000;(#,##0.000);Zero}", cal));
                    update = "update Supplier set Balance_Gold=Balance_Gold+'" + calGold + "', Balance_Cash=Balance_Cash+'"+cash+"' where Supplier_ID='" + txtSupID.Text + "'  ";
                    con.Open();
                    cmd = new SqlCommand(update, con);
                    cmd.ExecuteNonQuery();
                    con.Close();
                   DialogResult dialogResult= MessageBox.Show("RECORD INSERTED SUCCESSFULLY", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                   if( dialogResult==DialogResult.OK)
                    {
                        cash = 0;
                        calGold = 0;
                    }
                    panelInventory.Hide();
                    panelPremainInventory.Show();
                    TextBlankPreMainInventory();
                    ProductToolStrip.Enabled = true;
                    InventoryToolStrip.Enabled = true;
                    supplierToolStripMenuItem.Enabled = true;
                }
            }


            using (SqlConnection con = new SqlConnection(conn))
            {
                update = "update SupplierTransection set Gold_Receive=Gold_Receive+" + Gold +
                   " where Transection_ID='" + txtTransIDmain.Text + "'";
                con.Open();
                cmd = new SqlCommand(update, con);
                cmd.ExecuteNonQuery();
            }
            StyleInventoryGrid();
        }

        private void datePicker1_ValueChanged(object sender, EventArgs e)
        {

            txtDate.Text = datePicker1.Text;
            //   datePicker1.ResetText();

        }

        private void txtDate_MouseClick(object sender, MouseEventArgs e)
        {

            datePicker1.Enabled = true;

        }



        private void cmdID_SelectedIndexChanged(object sender, EventArgs e)
        {
            Console.WriteLine("Value is " + cmdID.SelectedItem);
            using (SqlConnection con = new SqlConnection(conn))
            {
                try
                {
                    select = "select * from Product where Product_Name ='" + cmdID.SelectedItem.ToString() + "' ";
                    cmd = new SqlCommand(select, con);
                    con.Open();
                    rdr = cmd.ExecuteReader();
                    //dt.Load(rdr);
                    while (rdr.Read())
                    {
                        txtProductID.Text = rdr["Product_Id"].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }

            }
        }


        void GettingcomboValue()
        {
            cmdID.Items.Clear();
            try
            {
                SqlConnection con = new SqlConnection(conn);
                con.Open();
                string query = "select Distinct Product_Name from Product";
                SqlCommand command = new SqlCommand(query, con);
                //using (SqlDataReader reader = command.ExecuteReader())
                //{
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    cmdID.Items.Add(reader.GetString(0));
                }
                con.Close();
            }
            catch (Exception ex)
            {
                // write exception info to log or anything else
                MessageBox.Show("Error occured!");
            }

        }
        //PANEL 3 
        // prODUCT RELATED OPERATIONS

        public string DBID = "";
        public static int ID_P = 0;
        string REGID = "";
        public static string Words = "SM/" + DateTime.Now.Year + "/";


        void CheckProduct()
        {
            using (SqlConnection con = new SqlConnection(conn))
            {
                con.Open();
                select = "select Product_Name from Product where Product_Name='" + txtProductName.Text + "'";
                cmd = new SqlCommand(select, con);
                rdr = cmd.ExecuteReader();
                while (rdr.Read())
                {
                    count = count + 1;
                }
                if (count <= 1)
                {
                    MessageBox.Show("Product already Exist", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    TextBoxProduct();
                }
            }
        }
        private void btnAddProduct_Click(object sender, EventArgs e)
        {

            con = new SqlConnection(conn);
            if (txtProductName.Text == string.Empty)
            {
                MessageBox.Show("Please Enter Product Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

            }
            else

                using (SqlConnection con = new SqlConnection(conn))
                {

                    string value = ID_P.ToString("00000");
                    REGID = Words + value;
                    con.Open();
                    select = "select Product_Name from Product where Product_Name='" + txtProductName.Text + "'";
                    cmd = new SqlCommand(select, con);
                    rdr = cmd.ExecuteReader();


                    while (rdr.Read())
                    {
                        count = count + 1;
                    }
                    if (count >= 1)
                    {
                        MessageBox.Show("Product already Exist", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        TextBoxProduct();
                    }

                    else
                    {
                        ID_P++;
                        value = ID_P.ToString("00000");
                        REGID = Words + value;
                        using (SqlConnection connn = new SqlConnection(conn))
                        {
                            string insert = "insert into Product values('" + REGID + "','" + txtProductName.Text + "','" + txtDesc.Text + "')";
                            //   string insert1 = "insert into Inventory values('" + REGID + "','" + txtProductName.Text + "')";
                            cmd = new SqlCommand(insert, connn);
                            //cmd1 = new SqlCommand(insert1, connn);
                            connn.Open();
                            cmd.ExecuteNonQuery();
                            //cmd1.ExecuteNonQuery();

                            GetdataProduct();
                            TextBoxProduct();
                        }
                    }



                }
            // StyleProductGrid();
        }


        private void btnDisplay_Product_Click(object sender, EventArgs e)
        {

            GetdataProduct();
            // StyleProductGrid();
        }

        private void NOinput_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void Numbers_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }

        }
        private void FloatNumbers_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar)&&(e.KeyChar != '.'))
            {
                e.Handled = true;
            }
            if ((e.KeyChar == '.') && ((sender as TextBox).Text.IndexOf('.') > -1))
            {
                e.Handled = true;
            }

        }

        private void Characters_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (char.IsControl(e.KeyChar) || char.IsLetter(e.KeyChar))
            {
                return;
            }
            e.Handled = true;
        }



        private void dataGridProduct_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            Console.WriteLine("Print " + e.ColumnIndex);
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            {

                dataGridProduct.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
                UpdateID = (dataGridProduct.Rows[e.RowIndex].Cells[0].Value.ToString());
                txtProductName.Text = (dataGridProduct.Rows[e.RowIndex].Cells[1].Value.ToString());
                txtDesc.Text = (dataGridProduct.Rows[e.RowIndex].Cells[2].Value.ToString());

                ButtonDisableProduct();
                btnUpdateProduct.Enabled = true;
            }
            else
            {
                MessageBox.Show("Please Click On CONTENT not on Column Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                Console.WriteLine("Print " + e.ColumnIndex + "      " + e.RowIndex);
            }


        }

        void ButtonDisableProduct()
        {
            btnAddProduct.Enabled = false;
            //btnCancelProduct.Enabled = false;
            btnDisplayProduct.Enabled = false;
            btnUpdateProduct.Enabled = false;
        }


        void ButtonDisableSupplier()
        {
            btnAdd.Enabled = false;
            //btnCancel.Enabled = false;
            btnDisplay.Enabled = false;
            btnuupdate.Enabled = false;
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Login ln = new Login();
            this.Hide();
            ln.ShowDialog();
        }

        private void btnCancelProduct_Click(object sender, EventArgs e)
        {
            TextBoxProduct();
            btnUpdateProduct.Enabled = false;
            btnAddProduct.Enabled = true;
            btnDisplayProduct.Enabled = true;

        }
        private void btnUpdateProduct_Click(object sender, EventArgs e)
        {
            if (txtProductName.Text == string.Empty)
            {
                MessageBox.Show("Please Enter Product Name", "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

            }
            else
                using (con = new SqlConnection(conn))
                {
                    con.Open();
                    select = "select Product_Name from Product where Product_Name='" + txtProductName.Text + "'";
                    cmd = new SqlCommand(select, con);
                    rdr = cmd.ExecuteReader();


                    while (rdr.Read())
                    {
                        count = count + 1;
                    }
                }
            if (count >= 1)
            {
                DialogResult dialogResult = MessageBox.Show("Product already Exist", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                TextBoxProduct();
                count = 0;
                if (dialogResult == DialogResult.OK)
                {

                    btnAddProduct.Enabled = true;
                    btnDisplayProduct.Enabled = true;
                    //btnCancelProduct.Enabled = true;
                    btnUpdateProduct.Enabled = false;

                }
            }
            else
            {
                using (con = new SqlConnection(conn))
                {
                    string update = "update Product set Product_Name='" + txtProductName.Text + "',Description='" + txtDesc.Text + "' where Product_ID='" + UpdateID + "'";
                    cmd = new SqlCommand(update, con);


                    con.Open();
                    cmd.ExecuteNonQuery();
                    ButtonDisableProduct();
                    btnUpdateProduct.Enabled = false;
                    ResetTextBoxesSupplier();
                    btnAddProduct.Enabled = true;
                    // btnCancelProduct.Enabled = true;
                    btnDisplayProduct.Enabled = true;
                    GetdataProduct();

                }
                using (con = new SqlConnection(conn))
                {
                    string update = "update Purchase set Product_Name='" + txtProductName.Text + "' where Product_ID='" + UpdateID + "'";
                    cmd = new SqlCommand(update, con);
                    con.Open();
                    cmd.ExecuteNonQuery();
                }
                using (con = new SqlConnection(conn))
                {
                    string update = "update Inventory set Item_Name='" + txtProductName.Text + "' where Product_Id='" + UpdateID + "'";
                    cmd = new SqlCommand(update, con);


                    con.Open();
                    cmd.ExecuteNonQuery();
                }
                using (con = new SqlConnection(conn))
                {
                    string update = "update InventoryDetails set Product_Name='" + txtProductName.Text + "' where Product_ID='" + UpdateID + "'";
                    cmd = new SqlCommand(update, con);



                    con.Open();
                    cmd.ExecuteNonQuery();

                }
                TextBoxProduct();


            }


        }
        void TextBoxProduct()
        {
            txtDesc.Text = "";
            txtProductName.Text = "";
        }
        void ProductRefresh()
        {
            TextBoxProduct();
            dataGridProduct.DataSource = "";
            btnAddProduct.Enabled = true;
            btnDisplay.Enabled = true;
            btnUpdateProduct.Enabled = false;

        }
        void SupplierRefresh()
        {
            SupplierRefreshTextBox();
            dataGridSupplier.DataSource = "";
            btnAdd.Enabled = true;
            btnuupdate.Enabled = false;
            btnDisplay.Enabled = true;
        }
        void getCountProduct()
        {
            con = new SqlConnection(conn);
            select = "SELECT TOP 1 Product_ID FROM Product ORDER BY Product_ID DESC";
            con.Open();

            cmd = new SqlCommand(select, con);
            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                DBID = (rdr[0]).ToString();
            }
            con.Close();
            if (DBID != string.Empty)
            {
                string temp = DBID.Substring(8, 5);
                ID_P = Convert.ToInt32(temp);
            }

        }
        private void dataGridProduct_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void gridInventoryDetails_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= 0 && e.RowIndex >= 0)
            {

            }
            else
            {
                MessageBox.Show("Please Click On CONTENT not on Column Name", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                //Console.WriteLine("Print " + e.ColumnIndex + "      " + e.RowIndex);
            }

        }



        private void TextChanged(object sender, EventArgs e)
        {
            rb22.Checked = false;
            rb18.Checked = false;
            rb14.Checked = false;

        }

        void StyleProductGrid()
        {
            dataGridProduct.ColumnHeadersDefaultCellStyle.Font =
     new Font("Microsoft Sans Serif", 11f, FontStyle.Bold);
            dataGridProduct.Columns["Product_Name"].Width = 130;
            dataGridProduct.Columns["Product_ID"].Width = 150;
            dataGridProduct.Columns["Description"].Width = 160;

            DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
            boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F);

        }
        private void dgGridProduct_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > 0)
            {
                System.Windows.Forms.DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
                boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold);
                boldStyle.ForeColor = Color.Red;
                dataGridProduct.Rows[e.RowIndex].DefaultCellStyle = boldStyle;
            }
            else
            {
                return;
            }
        }

        private void dgGridProduct_RowLeave(object sender, DataGridViewCellEventArgs e)
        {
            System.Windows.Forms.DataGridViewCellStyle norStyle = new System.Windows.Forms.DataGridViewCellStyle();
            norStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular);
            dataGridProduct.Rows[e.RowIndex].DefaultCellStyle = norStyle;


        }
        void StyleSupplierGrid()
        {
            dataGridSupplier.ColumnHeadersDefaultCellStyle.Font =
     new Font("Microsoft Sans Serif", 11f, FontStyle.Bold);
            dataGridSupplier.Columns["Supplier_ID"].Width = 110;
            dataGridSupplier.Columns["Email"].Width = 150;
            dataGridSupplier.Columns["Balance_Cash"].Width = 120;
            dataGridSupplier.Columns["Contact"].Width = 110;
            dataGridSupplier.Columns["Name"].Width = 110;
            dataGridSupplier.Columns["Balance_Gold"].Width = 120;

            DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
            boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F);

        }


        private void dgGridSupplier_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > 0)
            {
                System.Windows.Forms.DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
                boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold);
                boldStyle.ForeColor = Color.Red;
                dataGridSupplier.Rows[e.RowIndex].DefaultCellStyle = boldStyle;
            }
            else
            {
                return;
            }
        }

        private void dgGridSupplier_RowLeave(object sender, DataGridViewCellEventArgs e)
        {
            System.Windows.Forms.DataGridViewCellStyle norStyle = new System.Windows.Forms.DataGridViewCellStyle();
            norStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular);
            dataGridSupplier.Rows[e.RowIndex].DefaultCellStyle = norStyle;


        }


        void StyleInventoryGrid()
        {
            gridInventoryDetails.ColumnHeadersDefaultCellStyle.Font =
     new Font("Microsoft Sans Serif", 11f, FontStyle.Bold);
            gridInventoryDetails.Columns["Product_Name"].Width = 130;
            gridInventoryDetails.Columns["Product_ID"].Width = 140;
            gridInventoryDetails.Columns["Supplier_ID"].Width = 120;
            gridInventoryDetails.Columns["Supplier_Name"].Width = 130;
            gridInventoryDetails.Columns["Item_Weight"].Width = 130;
            gridInventoryDetails.Columns["Item_Quantity"].Width = 130;
            gridInventoryDetails.Columns["Transection_ID"].Width = 130;

            DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
            boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F);




        }
        private void dgGriInventory_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > 0)
            {
                System.Windows.Forms.DataGridViewCellStyle boldStyle = new System.Windows.Forms.DataGridViewCellStyle();
                boldStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold);
                boldStyle.ForeColor = Color.Red;
                gridInventoryDetails.Rows[e.RowIndex].DefaultCellStyle = boldStyle;
            }
            else
            {
                return;
            }
        }

        private void dgGridInventory_RowLeave(object sender, DataGridViewCellEventArgs e)
        {
            System.Windows.Forms.DataGridViewCellStyle norStyle = new System.Windows.Forms.DataGridViewCellStyle();
            norStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular);
            gridInventoryDetails.Rows[e.RowIndex].DefaultCellStyle = norStyle;


        }


        //Supplier@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#$$$$$$$$$$$$$$$$$#
        private void RadioButon_Click(object sender, EventArgs e)
        {

            float.TryParse(txtWeight.Text, out Gold_R);

            float.TryParse(txtLabour.Text, out Lab);
            float.TryParse(txtTouchPouch.Text, out touchPouch);
            total = Gold_R + touchPouch;
            txtLabourRs.Text = String.Format("{0:#,##0.000;($#,##0.000);Zero}", (total * Convert.ToDouble(txtLabour.Text) / 100));
            //string a=String.Format("{0:$#,##0.00;($#,##0.00);Zero}", (total * Convert.ToDouble(txtLabour.Text) / 100));


            if (rb22.Checked == true)
            {
                rbNam = "22 Krt";
                //float.TryParse(txtWeight.Text, out Gold_R);
                //float.TryParse(txtLabour.Text, out Lab);
                G_Receive = total * (92.7 + Lab) / 99.5;
            }
            else if (rb18.Checked == true)
            {
                rbNam = "18 Krt";
                //float.TryParse(txtWeight.Text, out Gold_R);
                //float.TryParse(txtLabour.Text, out Lab);
                G_Receive = total * (75.25 + Lab) / 99.5;
            }
            else if (rb14.Checked == true)
            {
                rbNam = "14 Krt";
                //float.TryParse(txtWeight.Text, out Gold_R);
                //float.TryParse(txtLabour.Text, out Lab);
                G_Receive = total * (50 + Lab) / 99.5;

            }
            txtPure.Text = String.Format("{0:#,##0.000;($#,##0.000);Zero}", G_Receive);
        }
        void ResetTextBoxesSupplier()
        {
            txtLoaction.Text = "";
            txtName.Text = "";
            txtContact.Text = "";
            txtEmail.Text = "";
        }



        private void label8_Click(object sender, EventArgs e)
        {

        }

        private void txtPure_TextChanged(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void txtCash_TextChanged(object sender, EventArgs e)
        {

        }

        private void rb14_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void rb18_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void rb22_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void txtDate_TextChanged(object sender, EventArgs e)
        {

        }



        private void lblDate_Click(object sender, EventArgs e)
        {

        }
        private void panelSupplier_Paint(object sender, PaintEventArgs e)
        {

        }

        private void panelPremainInventory_Paint(object sender, PaintEventArgs e)
        {

        }

        private void SummeryToolStrip_Click(object sender, EventArgs e)
        {
            Summery summ = new Summery();
            summ.ShowDialog();
        }

        private void panelProduct_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            SuplierEnableTextBox();
            ResetTextBoxesSupplier();
            btnDisplay.Enabled = true;
            btnAdd.Enabled = true;
            btnuupdate.Enabled = false;
        }

        private void txtLabour_Leave(object sender, EventArgs e)
        {
            float.TryParse(txtWeight.Text, out Gold_R);
            float.TryParse(txtLabour.Text, out Lab);
            float.TryParse(txtTouchPouch.Text, out touchPouch);
            total = Gold_R + touchPouch;

        }

        void GetdataProduct()
        {

            DataTable dt = new DataTable();
            select = "select * from Product";

            SqlConnection con = new SqlConnection(conn);
            cmd = new SqlCommand(select, con);
            con.Open();
            rdr = cmd.ExecuteReader();
            dt.Load(rdr);

            dataGridProduct.DataSource = dt;


            con.Close();

            //DataTable dr_art_line_2 = (DataTable)rdr["Product"];
            //for (int i = 0; i < dr_art_line_2.Rows.Count; i++)
            //{
            //    int temp = Convert.ToInt32(dr_art_line_2.Rows[i]["Product_ID"]);
            //}

            StyleProductGrid();

        }



        //$$$$$$$$$$$$$$$$$$$$$$$$$$$ PAnel 4 #############################

        private void cmbSpplierName_SelectedIndexChanged(object sender, EventArgs e)
        {
            using (SqlConnection con = new SqlConnection(conn))
            {
                try
                {
                    select = "select * from Supplier where Name ='" + cmbSuplierName.SelectedItem.ToString() + "' ";
                    cmd = new SqlCommand(select, con);
                    con.Open();
                    rdr = cmd.ExecuteReader();
                    //dt.Load(rdr);
                    while (rdr.Read())
                    {
                        txtID.Text = rdr["Supplier_Id"].ToString();

                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }


        }
        void GetSupplierName()// panel 4
        {
            cmbSuplierName.Items.Clear();
            try
            {
                SqlConnection con = new SqlConnection(conn);
                con.Open();
                string query = "select Name from Supplier";
                SqlCommand command = new SqlCommand(query, con);
                //using (SqlDataReader reader = command.ExecuteReader())
                //{
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    cmbSuplierName.Items.Add(reader.GetString(0));

                }
                con.Close();
            }
            catch (Exception ex)
            {
                // write exception info to log or anything else
                MessageBox.Show("Error Occured!");
            }
        }
        void getCountInitial()
        {
            using (con = new SqlConnection(conn))
            {
                string temp = "";
                select = "SELECT TOP 1 Transection_ID FROM SupplierTransection ORDER BY Transection_ID DESC";
                con.Open();

                cmd = new SqlCommand(select, con);
                rdr = cmd.ExecuteReader();
                //rdr.IsDBNull
                while (rdr.Read())
                {
                    temp = (rdr[0]).ToString();
                }
                if (temp != string.Empty)
                {
                    string stringID = temp;

                    ID = Convert.ToInt32(stringID);
                    ID++;

                }
                else
                    ID = 1;
                txtTransIDpremain.Text = ID.ToString();

            }

        }
        void TextBlankPreMainInventory()
        {
            txtID.Text = "";
           
            txtNoProduct.Text = "";
            txtTransIDpremain.Text = "";
            txtGoldPaid.Text = "";
            cmbSuplierName.SelectedItem = "";
            txtDatePremain.Text = "";
        }
        private void datePickPremain_ValueChanged(object sender, EventArgs e)
        {

            txtDatePremain.Text = datePickPremain.Text;
        }
        private void btnSubmitInitial_Click(object sender, EventArgs e)
        {
            if (txtID.Text == string.Empty)
            {
                MessageBox.Show("Please enter All Fields", "Success", MessageBoxButtons.OK);
            }
            else if (txtGoldPaid.Text == string.Empty)
            {
                MessageBox.Show("Please enter All Fields", "Success", MessageBoxButtons.OK);
            }

            else
            {

                using (con = new SqlConnection(conn))

                {
                    con.Open();
                    insert = "insert into SupplierTransection(Transection_ID,Supplier_ID,Gold_Paid,Date,Supplier_Name,Gold_Receive,Cash_Receive) values ('" + ID + "','" + txtID.Text + "'," +
                    " '" + txtGoldPaid.Text + "','" + Convert.ToDateTime(datePicker1.Value.Date) + "','" + cmbSuplierName.SelectedItem.ToString() + "'," + 0f + "," + 0f + ")";

                    //string update = "update Supplier set Cash_Paid='" + txtCashPaid.Text + "', Gold_Paid=" + txtGoldPaid.Text + ", Cash_Receive='" + txtCashReceive.Text + "', Gold_Receive= " + txtGoldReceive.Text + ",Balance_Cash='" + txtBalanceCash.Text + "', Balance_Gold=" + txtBalanceGold.Text + " where Supplier_ID='" + txtID.Text + "'";
                    SqlCommand cmd = new SqlCommand(insert, con);
                    cmd.ExecuteNonQuery();
                    //Sup_ID = txtID.Text;Convert.ToDateTime(datePicker1.Value.Date)
                    //SupNam = cmbSpplierName.SelectedItem.ToString();


                    DialogResult result = MessageBox.Show("Records Inserted Successfully", "Success", MessageBoxButtons.OK);
                    if (result == DialogResult.OK)
                    {
                        txtSupname.Text = cmbSuplierName.SelectedItem.ToString();
                        txtSupID.Text = txtID.Text;
                        txtTransIDmain.Text = (txtTransIDpremain.Text);
                        panelInventory.Show();
                        supplierToolStripMenuItem.Enabled = false;
                        InventoryToolStrip.Enabled = false;
                        ProductToolStrip.Enabled = false;
                        panelPremainInventory.Hide();
                        getCountMain();
                    }
                    // groupBox1.Hide();

                }





            }

        }

        private void DeleteLastTransection()//for last transection ID to be deleted if it is unsuccessfull
        {
            string delete = "delete  from SupplierTransection where Transection_ID='" + txtTransIDpremain.Text + "'";
            using (con = new SqlConnection(conn))
            {
                cmd = new SqlCommand(delete, con);
                con.Open();
                cmd.ExecuteNonQuery();
                MessageBox.Show("");
            }
        }
    }
}
